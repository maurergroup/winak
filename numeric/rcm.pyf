!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module rcm ! in 
    interface  ! in :rcm
        subroutine genrcm(n,adj_row,adj,perm) ! in :rcm:sparsepak_rcm.f90
            integer optional,check((len(adj_row)-1)>=n),depend(adj_row) :: n=(len(adj_row)-1)
            integer dimension(n + 1) :: adj_row
            integer dimension(*) :: adj
            integer intent(out),dimension(n),depend(n) :: perm
        end subroutine genrcm
        subroutine root_find(root,adj_row,adj,mask,nlvl,xls,ls,n) ! in :rcm:sparsepak_rcm.f90
            integer intent(in,out) :: root
            integer dimension(n + 1) :: adj_row
            integer dimension(*) :: adj
            integer dimension(n),depend(n) :: mask
            integer intent(out) :: nlvl
            integer intent(out),dimension(n + 1),depend(n) :: xls
            integer intent(out),dimension(n),depend(n) :: ls
            integer optional,check((len(adj_row)-1)>=n),depend(adj_row) :: n=(len(adj_row)-1)
        end subroutine root_find
        subroutine level_set(root,adj_row,adj,mask,nlvl,xls,ls,n) ! in :rcm:sparsepak_rcm.f90
            integer :: root
            integer dimension(n + 1) :: adj_row
            integer dimension(*) :: adj
            integer intent(in,out),dimension(n),depend(n) :: mask
            integer intent(out) :: nlvl
            integer intent(out),dimension(n + 1),depend(n) :: xls
            integer intent(out),dimension(n),depend(n) :: ls
            integer optional,check((len(adj_row)-1)>=n),depend(adj_row) :: n=(len(adj_row)-1)
        end subroutine level_set
        subroutine rcm(root,adj_row,adj,mask,perm,iccsze,n) ! in :rcm:sparsepak_rcm.f90
            integer :: root
            integer dimension(n + 1) :: adj_row
            integer dimension(*) :: adj
            integer intent(in,out),dimension(n),depend(n) :: mask
            integer intent(out),dimension(n),depend(n) :: perm
            integer intent(out) :: iccsze
            integer optional,check((len(adj_row)-1)>=n),depend(adj_row) :: n=(len(adj_row)-1)
        end subroutine rcm
        subroutine degree(root,adj_row,adj,mask,deg,iccsze,ls,n) ! in :rcm:sparsepak_rcm.f90
            integer :: root
            integer dimension(n + 1) :: adj_row
            integer dimension(*) :: adj
            integer dimension(n),depend(n) :: mask
            integer intent(out),dimension(n),depend(n) :: deg
            integer intent(out) :: iccsze
            integer intent(out),dimension(n),depend(n) :: ls
            integer optional,check((len(adj_row)-1)>=n),depend(adj_row) :: n=(len(adj_row)-1)
        end subroutine degree
        subroutine ivec_reverse(n,a) ! in :rcm:sparsepak_rcm.f90
            integer optional,check(len(a)>=n),depend(a) :: n=len(a)
            integer intent(in,out),dimension(n) :: a
        end subroutine ivec_reverse
    end interface 
end python module rcm

! f2py (version:2.45.241_1926)
! See http://cens.ioc.ee/projects/f2py2e/
